<template>
  <div class="h-screen flex overflow-hidden bg-white" @keypress.ctrl="shortcuts">
    <!-- Off-canvas menu for mobile -->
    <div class="md:hidden">
      <div class="fixed inset-0 flex z-40">
        <!--
        Off-canvas menu overlay, show/hide based on off-canvas menu state.

        Entering: "transition-opacity ease-linear duration-300"
          From: "opacity-0"
          To: "opacity-100"
        Leaving: "transition-opacity ease-linear duration-300"
          From: "opacity-100"
          To: "opacity-0"
        -->
        <div class="fixed inset-0">
          <div class="absolute inset-0 bg-gray-600 opacity-75"></div>
        </div>
        <!--
        Off-canvas menu, show/hide based on off-canvas menu state.

        Entering: "transition ease-in-out duration-300 transform"
          From: "-translate-x-full"
          To: "translate-x-0"
        Leaving: "transition ease-in-out duration-300 transform"
          From: "translate-x-0"
          To: "-translate-x-full"
        -->
        <div class="relative flex-1 flex flex-col max-w-xs w-full bg-white">
          <div class="absolute top-0 right-0 -mr-14 p-1">
            <button
              class="flex items-center justify-center h-12 w-12 rounded-full focus:outline-none focus:bg-gray-600"
              aria-label="Close sidebar"
            >
              <svg
                class="h-6 w-6 text-white"
                stroke="currentColor"
                fill="none"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M6 18L18 6M6 6l12 12"
                />
              </svg>
            </button>
          </div>
          <div class="flex-1 h-0 pt-5 pb-4 overflow-y-auto">
            <div class="flex-shrink-0 flex items-center px-4">
              <img class="h-8 w-auto" src="/img/logos/workflow-logo-on-white.svg" alt="Workflow" />
            </div>
            <nav class="mt-5 px-2">
              <a
                href="#"
                class="group flex items-center px-2 py-2 text-base leading-6 font-medium text-gray-900 rounded-md bg-gray-100 focus:outline-none focus:bg-gray-200 transition ease-in-out duration-150"
              >
                <svg
                  class="mr-4 h-6 w-6 text-gray-500 group-hover:text-gray-500 group-focus:text-gray-600 transition ease-in-out duration-150"
                  stroke="currentColor"
                  fill="none"
                  viewBox="0 0 24 24"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M3 12l9-9 9 9M5 10v10a1 1 0 001 1h3a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1h3a1 1 0 001-1V10M9 21h6"
                  />
                </svg>
                Schema
              </a>
            </nav>
          </div>
          <!-- <div class="flex-shrink-0 flex border-t border-gray-200 p-4">
            <a href="#" class="flex-shrink-0 group block focus:outline-none">
              <div class="flex items-center">
                <div>
                  <img
                    class="inline-block h-10 w-10 rounded-full"
                    src="https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=facearea&facepad=2&w=256&h=256&q=80"
                    alt
                  />
                </div>
                <div class="ml-3">
                  <p
                    class="text-base leading-6 font-medium text-gray-700 group-hover:text-gray-900"
                  >Tom Cook</p>
                  <p
                    class="text-sm leading-5 font-medium text-gray-500 group-hover:text-gray-700 group-focus:underline transition ease-in-out duration-150"
                  >View profile</p>
                </div>
              </div>
            </a>
          </div>-->
        </div>
        <div class="flex-shrink-0 w-14">
          <!-- Force sidebar to shrink to fit close icon -->
        </div>
      </div>
    </div>

    <!-- Static sidebar for desktop -->
    <div class="hidden md:flex md:flex-shrink-0">
      <div class="flex flex-col w-64 border-r border-gray-200 bg-white">
        <div class="h-0 flex-1 flex flex-col pt-4 pb-4 overflow-y-auto">
          <!-- <div class="flex items-center flex-shrink-0 px-4">
            <img class="h-8 w-auto" src="/img/logos/workflow-logo-on-white.svg" alt="Workflow" />
          </div>-->
          <!-- Sidebar component, swap this element with another sidebar if you like -->
          <nav class="flex-1 px-2 bg-white">
            <a
              href="#"
              class="group flex items-center px-2 py-2 text-sm leading-5 font-medium text-gray-900 rounded-md bg-gray-100 hover:text-gray-900 hover:bg-gray-100 focus:outline-none focus:bg-gray-200 transition ease-in-out duration-150"
            >Schema</a>
          </nav>
        </div>
        <div class="flex-shrink-0 flex border-t border-gray-200 p-4">
          <a
            href="http://biota.rocks"
            target="_blank"
            class="flex-shrink-0 w-full group block opacity-25 hover:opacity-100"
          >
            <div class="flex justify-center items-center">
              <img class="inline-block w-30" :src="'./logo_and_name.png'" alt />
            </div>
          </a>
        </div>
      </div>
    </div>
    <div class="flex flex-col w-0 flex-1 overflow-hidden">
      <div class="md:hidden pl-1 pt-1 sm:pl-3 sm:pt-3">
        <button
          class="-ml-0.5 -mt-0.5 h-12 w-12 inline-flex items-center justify-center rounded-md text-gray-500 hover:text-gray-900 focus:outline-none focus:bg-gray-200 transition ease-in-out duration-150"
          aria-label="Open sidebar"
        >
          <svg class="h-6 w-6" stroke="currentColor" fill="none" viewBox="0 0 24 24">
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"
            />
          </svg>
        </button>
      </div>
      <main
        class="flex-1 flex flex-col relative z-0 overflow-y-auto focus:outline-none"
        tabindex="0"
      >
        <div class="bg-white px-4 py-3 border-b border-r border-gray-200 sm:px-6">
          <div class="-ml-4 -mt-2 flex items-center justify-between flex-wrap sm:flex-no-wrap">
            <div class="ml-4 mt-2">
              <h3 class="text-lg leading-6 font-medium text-gray-300">Sandbox</h3>
            </div>
            <div class="ml-4 mt-2 flex-shrink-0">
              <dropdown :items="samples" @choice="loadSample">
                <button
                  type="button"
                  class="relative inline-flex items-center px-4 py-2 text-xs leading-5 font-medium rounded-md text-white bg-gray-900 hover:bg-gray-800"
                >
                  Samples
                  <svg class="-mr-1 ml-2 h-5 w-5" fill="currentColor" viewBox="0 0 20 20">
                    <path
                      fill-rule="evenodd"
                      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                      clip-rule="evenodd"
                    />
                  </svg>
                </button>
              </dropdown>
              <span class="inline-flex rounded-md shadow-sm">
                <button
                  type="button"
                  @click="() => process()"
                  class="relative inline-flex items-center px-4 py-2 border border-gray-400 text-xs leading-5 font-medium rounded-md text-gray-500 bg-transparent hover:bg-gray-100"
                >Run</button>
              </span>
            </div>
          </div>
        </div>
        <div class="flex-1 flex flex-row flex-wrap">
          <div class="w-2/4 flex flex-col flex-wrap items-stretch">
            <div class="flex flex-col flex-wrap">
              <div
                class="border-b border-gray-200 p-3 mb-3 bg-gray-50 flex flex-row justify-between items-center"
              >
                <div class="text-xs font-bold uppercase">Schema</div>
              </div>
              <MonacoEditor
                ref="schemaEditor"
                @editorDidMount="editorDidMount"
                class="editor overflow-visible"
                style="min-height: 340px;"
                v-model="schema"
                :options="editorOptions"
                language="json"
              />
              <resize-observer @notify="handleResize('schemaEditor')" />
            </div>
            <div class="flex flex-col flex-wrap">
              <div
                class="border-b border-t border-gray-200 p-3 mb-3 bg-gray-50 text-xs font-bold uppercase"
              >Input</div>
              <MonacoEditor
                ref="inputEditor"
                @editorDidMount="editorDidMount"
                class="editor overflow-visible"
                style="min-height: 340px;"
                v-model="input"
                :options="editorOptions"
                language="json"
              />
              <resize-observer @notify="handleResize('inputEditor')" />
            </div>
          </div>
          <div class="w-2/4 flex flex-col flex-wrap border-l border-gray-200">
            <div class="flex flex-col flex-wrap">
              <div
                class="border-b border-r border-gray-200 p-3 mb-3 bg-gray-50 text-xs font-bold uppercase"
              >Result</div>
              <MonacoEditor
                ref="outputEditor"
                @editorDidMount="editorDidMount"
                class="editor overflow-visible"
                style="min-height: 440px;"
                v-model="output"
                :options="editorOptions"
                language="json"
              />
              <resize-observer @notify="handleResize('outputEditor')" />
            </div>
            <div class="flex flex-col flex-wrap">
              <!-- <div class="w-full bg-blue-600 p-3 text-white">Infos</div> -->
              <div class>
                <div
                  class="border-b border-t border-r border-gray-200 p-3 bg-gray-50 text-xs font-bold uppercase"
                >Informations</div>

                <dl>
                  <div class="px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt class="text-sm leading-5 font-medium text-gray-500">Valid</dt>
                    <dd
                      class="mt-1 text-sm leading-5 text-gray-900 sm:mt-0 sm:col-span-2"
                      :class="{'text-green-600': outputObj.valid== true, 'text-red-600': outputObj.valid == false}"
                    >{{ typeof outputObj.valid === undefined ? '-' : outputObj.valid}}</dd>
                  </div>
                </dl>
                <dl>
                  <div class="px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt class="text-sm leading-5 font-medium text-gray-500">Sanitized</dt>
                    <dd
                      class="mt-1 text-sm leading-5 text-gray-900 sm:mt-0 sm:col-span-2"
                    >{{ typeof outputObj.sanitized === undefined ? '-' : outputObj.sanitized}}</dd>
                  </div>
                </dl>
              </div>
              <div class>
                <div
                  class="border-b border-t border-r border-gray-200 p-3 bg-gray-50 text-xs font-bold uppercase"
                  :class="{'text-white bg-red-600': outputObj.valid == false, 'text-white bg-green-500': outputObj.valid == true}"
                >{{pluralize('Error', Array.isArray(outputObj.errors) ? outputObj.errors.length : 0, true)}}</div>
                <dl v-if="outputObj && Array.isArray(outputObj.errors)">
                  <div
                    v-for="error of outputObj.errors"
                    :key="error.message"
                    class="px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6"
                  >
                    <dt class="text-sm leading-5 font-medium text-red-600">{{error.type}}</dt>
                    <dd
                      class="mt-1 text-sm leading-5 text-gray-900 sm:mt-0 sm:col-span-2"
                    >{{error.message}}</dd>
                  </div>
                </dl>
                <dl v-else>
                  <div class="px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                    <dt class="text-sm leading-5 font-medium text-gray-500">-</dt>
                    <dd class="mt-1 text-sm leading-5 text-gray-900 sm:mt-0 sm:col-span-2">-</dd>
                  </div>
                </dl>
              </div>
            </div>
          </div>
        </div>
        <div class="bg-white px-4 py-5 border-b border-t border-r border-gray-200 sm:px-6">
          <div class="-ml-4 -mt-2 flex items-center justify-between flex-wrap sm:flex-no-wrap">
            <div class="ml-4 mt-2">
              <span class="text-xs text-gray-400 underline mr-3">
                <a
                  href="https://fauna-community.slack.com/archives/C011CMPS7AB"
                  target="_blank"
                >Join #biota's channel</a>
              </span>
              <span class="text-xs text-gray-400 underline">
                <a href="https://github.com/biota-framework/schema" target="_blank">Github Repo</a>
              </span>
            </div>
            <div class="ml-4 mt-2 flex-shrink-0">
              <span class="inline-flex rounded-md shadow-sm">
                <button
                  type="button"
                  @click="() => process()"
                  class="relative inline-flex items-center px-4 py-2 border border-gray-400 text-xs leading-5 font-medium rounded-md text-gray-500 bg-transparent hover:bg-gray-100"
                >Run (ctrl + enter)</button>
              </span>
            </div>
          </div>
        </div>
      </main>
    </div>
  </div>
</template>

<script>
import { samples } from "./samples";
import dropdown from "~/components/dropdown";
import pluralize from "pluralize";
import fauna from "faunadb";
const q = fauna.query;
import MonacoEditor from "vue-monaco";
const db = new fauna.Client({ secret: process.env.FAUNA_KEY });

export default {
  components: {
    MonacoEditor,
    dropdown
    // "vue-json-pretty": () => (process.client ? import("vue-json-pretty") : null)
  },
  data() {
    return {
      pluralize,
      samples,
      schema: ``,
      input: ``,
      output: ``,
      editorOptions: {
        contextmenu: false,
        minimap: {
          enabled: false
        }
      },
      outputOptions: {
        deep: 4,
        showLength: true,
        showLine: true,
        showSelectController: true,
        selectOnClickNode: true,
        showDoubleQuotes: true,
        highlightMouseoverNode: true,
        highlightSelectedNode: true,
        collapsedOnClickBrackets: true
      }
    };
  },
  mounted() {
    this.schema = localStorage.getItem("schema") || ``;
    this.input = localStorage.getItem("input") || ``;
    this.output = localStorage.getItem("output") || ``;
  },
  methods: {
    schemaExamplesPicker(item) {
      console.log("schemaExamplesPicker", item);
    },
    shortcuts(e) {
      if (e.ctrlKey && (e.key === "Enter" || e.code === "Enter")) {
        e.preventDefault();
        e.stopPropagation();
        this.process();
      }
    },
    handleResize(refName) {
      return e => {
        try {
          this.$refs[refName].layout();
        } catch (error) {
          console.error(error);
        }
      };
    },
    editorDidMount(editor) {
      editor.onKeyDown(e => {
        this.shortcuts(e);
      });
    },
    loadSample(name) {
      if (samples[name]) {
        this.schema = JSON.stringify(samples[name].schema, null, 2);
        this.input = JSON.stringify(samples[name].input, null, 2);
        this.output = "";
      }
    },
    async process() {
      this.output = "";
      console.log("Running query..");
      try {
        const results = await db.query(
          q.Call(
            "biota.schema@0.0.1+Validate",
            {},
            {
              value: JSON.parse(this.input),
              options: {
                validate: JSON.parse(this.schema)
              }
            }
          )
        );

        console.log("Done with:", results);
        this.output = JSON.stringify(results.response, null, 2);
      } catch (error) {
        console.error(error);
      }
    }
  },
  computed: {
    inputValue() {
      try {
        return JSON.parse(this.input);
      } catch (error) {
        return {};
      }
    },
    outputObj() {
      try {
        return JSON.parse(this.output);
      } catch (error) {
        return {};
      }
    },
    result() {
      try {
        return this.outputObj.value;
      } catch (error) {
        return "";
      }
    }
  },
  watch: {
    schema(schema) {
      localStorage.setItem("schema", schema);
    },
    input(input) {
      localStorage.setItem("input", input);
    },
    output(output) {
      localStorage.setItem("output", output);
    }
  }
};
</script>

<style>
</style>
